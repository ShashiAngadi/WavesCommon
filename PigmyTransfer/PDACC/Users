VERSION 1.0 CLASS
BEGIN
  MultiUse = -1  'True
  Persistable = 0  'NotPersistable
  DataBindingBehavior = 0  'vbNone
  DataSourceBehavior  = 0  'vbNone
  MTSTransactionMode  = 0  'NotAnMTSObject
END
Attribute VB_Name = "clsUsers"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = True
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False

 
Option Explicit
        
Private m_UserName As String
Private m_UserPassword As String
Private m_UserPermissions As Long

Private m_TimeOut As Long
Private m_CancelError As Boolean
Private m_Failures As Long

Private m_MaxRetries As Byte
Private m_LoginStatus As Boolean
Private m_UserID As Long

Private WithEvents m_frmLogin As frmLogin
Attribute m_frmLogin.VB_VarHelpID = -1
Private WithEvents m_frmUsrAdd As frmUsrAdd
Attribute m_frmUsrAdd.VB_VarHelpID = -1
Public Event LoginStatus(Status As Boolean)
Public Property Let CancelError(NewVal As Boolean)
    m_CancelError = NewVal
End Property


Public Property Get CancelError() As Boolean
    CancelError = m_CancelError
End Property

Public Property Get UserID() As Long
    UserID = m_UserID
End Property
Public Property Get Failures() As Long
    Failures = m_Failures
End Property

Public Function Login(UserName As String, Password As String, LoginDate As String)
'Dim TempUserArray(5) As String
Dim FoundUser As Boolean
Dim Rst As Recordset

'Prelim Checks
    If UserName = "" Or Password = "" Then
        m_Failures = m_Failures + 1
        Exit Function
    End If
    
'Initialize variables
    m_UserName = ""
    m_UserPassword = ""
    m_UserPermissions = 0
    m_UserID = 0
    gDBTrans.SQLStmt = "Select * from UserTab where " & _
                        " LoginName = " & AddQuotes(UserName, True) & " and " & _
                        " LoginPassword = " & AddQuotes(Password, True) & " And deleted = " & False
    Dim Retval As Long
    Retval = gDBTrans.Fetch(Rst, adOpenStatic)
    If Retval <= 0 Or Retval > 1 Then
        FoundUser = False
    Else
        FoundUser = True
    End If
    
'Return the status
    If FoundUser Then
        m_UserName = UserName
        m_UserPassword = Password
        m_UserPermissions = Val(Rst.Fields("Permissions"))
        m_Failures = 0
        m_UserID = Val(Rst.Fields("UserID"))
    Else
        m_Failures = m_Failures + 1
    End If
    
    Login = FoundUser
    gcurrUser.MaxRetries = 3
End Function

Public Property Get LoginStatus() As Boolean
    LoginStatus = m_LoginStatus
End Property

Public Property Let MaxRetries(NewVal As Byte)
    m_MaxRetries = NewVal
End Property
Public Property Get MaxRetries() As Byte
    MaxRetries = m_MaxRetries
End Property

Public Property Get UserPermissions() As Long
    UserPermissions = m_UserPermissions
End Property

Public Sub ShowLoginDialog()
    Set m_frmLogin = New frmLogin
    m_frmLogin.Show vbModal
    If Not m_LoginStatus Then
        m_UserName = ""
        m_UserPassword = ""
        m_UserPermissions = 0
        m_UserID = 0
    End If
End Sub

Public Sub ShowUserDialog()
'Prelim check (who is the user ?"
    If Me.UserName = "" Then
        Exit Sub
    End If

'Shows UI, based on the user permissions
    Set m_frmUsrAdd = New frmUsrAdd
    m_frmUsrAdd.Show vbModal

#If Junk Then
'Load the User Details to the UI
    If Not UserDetailsLoad Then
        MsgBox "Unable to load user details !", vbExclamation, gAppName & " - Error"
        Exit Sub
    End If

'Load the details of this user
    If Not m_frmUsrAdd.LoadUserDetails(m_frmUsrAdd.cmbNames.ItemData(m_frmUsrAdd.cmbNames.ListIndex)) Then
        MsgBox "Unable to load user details !", vbExclamation, gAppName & " - Error"
        Exit Sub
    End If

'Show the form now
    m_frmUsrAdd.Show vbModal
#End If
End Sub
Public Property Get TimeOut() As Long
    TimeOut = m_TimeOut
End Property
Public Property Let TimeOut(NewVal As Long)
    m_TimeOut = NewVal
End Property

Public Property Get UserName() As String
    UserName = m_UserName
End Property


Private Function XXX_UserDetailsLoad() As Boolean
#If Junk Then
Dim Perms As wis_Permissions
Dim IsAdmin As Boolean

'Prelim checks
    If m_frmUsrAdd Is Nothing Then
        Exit Function
    End If

'Set admin variable
    Perms = wisAdmin
    IsAdmin = Perms And Permissions

'Set the Create new Command Button
    m_frmUsrAdd.cmdNew.Enabled = IIf(IsAdmin, True, False)
    
'Fill user list in combo
    Dim Retval As Integer
    Dim I As Integer
    Dim FullName As String
    m_frmUsrAdd.cmbNames.Clear
    gDBTrans.SQLStmt = "Select NameTab.Title, NameTab.FirstName, " & _
                            " NameTab.MiddleName, NameTab.LastName,UserTab.CustomerID, NameTab.CustomerID, " & _
                            " UserTab.LoginName from NameTab, UserTab where NameTab.CustomerID = UserTab.CustomerID"
    Retval = gDBTrans.SQLFetch
    For I = 1 To gDBTrans.Records
        
        FullName = FormatField(gDBTrans.Rst(0)) & " " & _
                    FormatField(gDBTrans.Rst(1)) & " " & _
                    FormatField(gDBTrans.Rst(2))
        'if strcomp(gdbtrans.Rst("UserTab.LoginName")) = 0  then
        If StrComp(gDBTrans.Rst("LoginName"), Me.UserName, vbBinaryCompare) = 0 Or IsAdmin Then
            m_frmUsrAdd.cmbNames.AddItem FullName
            m_frmUsrAdd.cmbNames.ItemData(m_frmUsrAdd.cmbNames.NewIndex) = Val(FormatField(gDBTrans.Rst("NameTab.CustomerID")))
        End If
        gDBTrans.Rst.MoveNext
    Next I
        
    'm_frmUsrAdd.cmbNames.AddItem Me.UserName
    m_frmUsrAdd.cmbNames.ListIndex = 0

'Exit if name not found
    If m_frmUsrAdd.cmbNames.ListIndex < 0 Then
        Exit Function
    End If

'Permissions...
    'If m_frmUsrAdd.cmbNames.ListIndex > 0 Then
        m_frmUsrAdd.lstPermissions.Enabled = IIf(IsAdmin, True, False)
        m_frmUsrAdd.cmdSelectAll.Enabled = IIf(IsAdmin, True, False)
        m_frmUsrAdd.cmdUnselectAll.Enabled = IIf(IsAdmin, True, False)
        m_frmUsrAdd.lblPermissions.Enabled = IIf(IsAdmin, True, False)
        m_frmUsrAdd.cmdApply.Enabled = False
    'Else
    '    m_frmUsrAdd.lstPermissions.Enabled = False
    '    m_frmUsrAdd.cmdSelectAll.Enabled = False
    '    m_frmUsrAdd.cmdUnselectAll.Enabled = False
    '    m_frmUsrAdd.lblPermissions.Enabled = False
    '    m_frmUsrAdd.cmdApply.Enabled = False
    '    For I = 0 To m_frmUsrAdd.lstPermissions.ListCount - 1
    '        m_frmUsrAdd.lstPermissions.Selected(I) = True
    '    Next I
    'End If
UserDetailsLoad = True
#End If
End Function




Public Property Get Userpassword() As String
    Userpassword = m_UserPassword
End Property





Private Sub Class_Initialize()
Dim Perm As wis_Permissions
Dim Rst As adodb.Recordset

Perm = perDepCreate
Perm = perFullPermissions Or Perm

''Check if the User database has anything in it
gDBTrans.SQLStmt = "Select Count(*) as TOTUsers from UserTab"

Call gDBTrans.Fetch(Rst, adOpenForwardOnly)

If Val(Rst("TotUsers")) = 0 Then   'Put admin / admin /
    gDBTrans.BeginTrans
    gDBTrans.SQLStmt = "Insert into UserTab (UserId, CustomerID, " & _
                " LoginName, Password, Permissions) " & _
                " values (0, 0,'admin','admin'," & Perm & ")"
    If Not gDBTrans.SQLExecute Then
        MsgBox "Initialization Error !", vbExclamation, gAppName
        gDBTrans.RollBack
    End If
    gDBTrans.CommitTrans
End If
    

End Sub

Private Sub Class_Terminate()
On Error Resume Next
Unload m_frmLogin
Set m_frmLogin = Nothing
End Sub


Private Sub m_frmLogin_CancelClicked()
If m_CancelError Then
    'Err.Raise 20005, "Cancel Error", "Login was cancelled"
End If
    m_LoginStatus = False
End Sub

Private Sub m_frmLogin_LoginClicked(UserName As String, Userpassword As String, LoginDate As String, UnloadDialog As Boolean)
    m_LoginStatus = Login(UserName, Userpassword, LoginDate)
    If Not m_LoginStatus Then
        'MsgBox "Invalid login !", vbExclamation, gAppName & " - Error"
        MsgBox LoadResString(gLangOffSet + 515), vbExclamation, gAppName & " - Error"
        
        If m_Failures >= m_MaxRetries Then
            If m_CancelError Then
                'Err.Raise 20005, "Cancel Error", "Login was cancelled"
            End If
            UnloadDialog = True
        Else
            UnloadDialog = False
        End If
    Else
        UnloadDialog = True
    End If
    gcurrUser.MaxRetries = 3
    'guserid=
End Sub


Private Sub m_frmUsrAdd_GetUserDetails(LoginName As String, Password As String, Permissions As Long)
    LoginName = m_UserName
    Password = m_UserPassword
    Permissions = m_UserPermissions
End Sub

Private Sub m_frmUsrAdd_GetUserID(UserID As Long)
    UserID = m_UserID
End Sub

